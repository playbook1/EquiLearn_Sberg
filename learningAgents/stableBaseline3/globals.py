def initialize():
    global TOTAL_DEMAND, LOW_COST, HIGH_COST, TOTAL_STAGES, NUM_ADV_HISTORY, LR, GAMMA, NUM_ACTIONS
    global ACTION_STEP, NUM_STOCHASTIC_ITER, NUM_EPISODES, NUM_EPISODES_RESET, EPISODE_ADV_INCREASE
    global REWARDS_DIVISION_CONST,REPLAY_BUFFER_SIZE,PROB_BREAK_LIMIT_LN,CONVERGE_BREAK, PRINT_STEP
    global BATCH_UPDATE_SIZE,BUFFER_PLAY_COEFFICIENT, NUM_CORES,NUM_TRACE_EQUILIBRIA
    global TIMESTEPS, NUM_TIMESTEPS,CON_ACTIONS_RANGE

    TOTAL_DEMAND = 400
    LOW_COST = 57
    HIGH_COST = 71
    # TOTAL_STAGES = 4
    TOTAL_STAGES = 25
    NUM_ADV_HISTORY = 3
    # LR = 0.005
    LR = 0.000005
    GAMMA = 1
    NUM_ACTIONS = 20
    CON_ACTIONS_RANGE=60
    ACTION_STEP = 3
    NUM_STOCHASTIC_ITER = 3
    REWARDS_DIVISION_CONST = 1000

    # EPISODES FOR LEARNING THE LAST STAGE, THEN FOR 2ND TO LAST STAGE 2*NUMEPISODES. IN TOTAL:300*NUMEPISODES
    NUM_EPISODES = 2000
    # NUM_EPISODES = 3000
    NUM_EPISODES_RESET = NUM_EPISODES
    # INCREASE IN NUM OF EPISODES FOR EACH ADV IN SUPPORT
    EPISODE_ADV_INCREASE = 500


    NUM_CORES=4

    NUM_TRACE_EQUILIBRIA=3

    # TIMESTEPS = 500_000
    # NUM_TIMESTEPS= 20